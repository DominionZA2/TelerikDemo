@page "/grid"

<PageTitle>Cosoft | Grid</PageTitle>

<h1>Weather data</h1>

<ul>
    <li>The command buttons do not have a theme applied. This is how they look by default in a grid</li>
    <li>The tooltip does not seem to have any style applied as it looks the same between theme toggles</li>
    <li>Hovering over rows gives a different effect for every second row (bold font etc...)</li>
    <li>Items per page drop down does not show selected value. Code has been checked so suspect a theme issue</li>
</ul>


@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <TelerikGrid Data="@_forecasts" Pageable="true" @bind-PageSize="_pageSize" @bind-Page="_currentPage">
        <GridSettings>
            <GridPagerSettings PageSizes="@_pageSizes" InputType="PagerInputType.Input" Adaptive="true" />
        </GridSettings>
        <GridColumns>
            <GridColumn Field="Date" Title="Date" DisplayFormat="{0:MM/dd/yyyy}" />
            <GridColumn Field="TemperatureC" Title="Temp. (C)" />
            <GridColumn Field="TemperatureF" Title="Temp. (F)" />
            <GridColumn Field="Summary" Title="Summary" />
            <GridCommandColumn>
                <GridCommandButton Icon="@SvgIcon.Pencil" OnClick="@((GridCommandEventArgs args) => Button1Click(args))" Title="This is the default tooltip appearance">1</GridCommandButton>
                <GridCommandButton Icon="@SvgIcon.StickyNote" OnClick="@((GridCommandEventArgs args) => Button2Click(args))" Title="This is the default tooltip appearance">2</GridCommandButton>
                <GridCommandButton Icon="@SvgIcon.TableDelete" OnClick="@((GridCommandEventArgs args) => Button3Click(args))" Title="This is the default tooltip appearance">3</GridCommandButton>
                <GridCommandButton Icon="@SvgIcon.TableDelete" OnClick="@((GridCommandEventArgs args) => Button3Click(args))" Title="This is the default tooltip appearance for a disabled button" Enabled="false">3D</GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
}

@code {
    private WeatherForecast[]? _forecasts;
    private int _pageSize = 15;
    private int _currentPage = 1;
    private readonly List<int?> _pageSizes = [15, 30, null];

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching",
            "Frigid", "Arctic", "Frosty", "Crisp", "Pleasant", "Temperate", "Sultry", "Tropical", "Humid", "Arid",
            "Blistering", "Polar", "Icy", "Raw", "Spring-like", "Autumn-like", "Stuffy", "Muggy", "Oppressive", "Sizzling"
        };
        _forecasts = Enumerable.Range(1, 100).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private void Button1Click(GridCommandEventArgs args)
    {
        var item = args.Item as WeatherForecast;
        // Handle button 1 click
    }

    private void Button2Click(GridCommandEventArgs args)
    {
        var item = args.Item as WeatherForecast;
        // Handle button 2 click
    }

    private void Button3Click(GridCommandEventArgs args)
    {
        var item = args.Item as WeatherForecast;
        // Handle button 3 click
    }
}
